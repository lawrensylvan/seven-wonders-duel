import {v4 as uuid} from 'uuid'
import { ServerState } from './state'

const state = ServerState()

export const ActionHandler = (io) => {
    
    // Private utility recursive function for handling events generated by the game itself
    const processGameEvent = (tableId, event, alreadyStarted) => {
        const eventProcessor = alreadyStarted ? event : state.getEventProcessor(tableId, event)
        let moreEvents = false
        do {
            const {value, done} = eventProcessor.next()
            moreEvents = !done
            state.computePublicStates(tableId)
            state.getPlayers(tableId).forEach(player => {
                const patch = state.getGameStatePatch4(player, tableId)
                if(patch && patch.length > 0) {
                    io.to(player).emit('action', {type:'gameStatePatched', tableId, patch})
                }
            })
            if(typeof value === 'function') {
                // If the generator yields another generator, we should process that game event
                processGameEvent(tableId, value)
            }
            if(value !== null && typeof value === 'object') {
                // If the generator yields an object created by the special 'expect' action creator
                const {player, allowedActions} = value
                // register the generator 
                state.setExpectedMove(tableId, player, allowedActions, eventProcessor)
                moreEvents = false
            }
            
        } while(moreEvents)
    }
    
    // Set of exposed functions for processing actions requested by the clients (socket)
    return {
        
        connect: (socket) => {
            state.registerSocket(socket.id)
            socket.join('lobby')
        },

        disconnect: (socket) => {
            /*const player = state.getPlayerBySocket(socket.id)
            if(player) {
                state.kick(player)
            }*/
            state.unregisterSocket(socket.id)
            socket.leaveAll()
        },

        login: ({name}, socket) => {
            state.registerPlayer(name, socket.id)
            socket.join(name)
            socket.emit('action', {type:'loggedIn', name:name})
        },

        getAllTables: (action, socket) => {
            socket.emit('action', {type:'refreshTables', tables:state.getTables()})
        },

        createTable: (action, socket) => {
            const player = state.getPlayerBySocket(socket.id)
            const id = state.createTable(player)
            //socket.leave('lobby')
            socket.join(`table/${id}`)
            io.in('lobby').emit('action', {type:'tableCreated', table:state.getTable(id)})
        },

        joinTable: ({id}, socket) => {
            const player = state.getPlayerBySocket(socket.id)
            state.joinTable(player, id)
            //socket.leave(`lobby`)
            socket.join(`table/${id}`)
            io.in('lobby').emit('action', {type:'tableUpdated', table:state.getTable(id)})
        },

        readyToPlay: ({tableId}, socket) => {
            const player = state.getPlayerBySocket(socket.id)
            state.playerIsReady(player, tableId)
            io.to('lobby').emit('action', {type:'tableUpdated', table:state.getTable(tableId)})
            if(state.getTable(tableId).status === 'READY_TO_START') {
                state.startGame(tableId)
                const gameState = state.getGameState4(player, tableId)
                io.in(`table/${tableId}`).emit('action', {type:'gameStarted', tableId, state:gameState})
                processGameEvent(tableId, state.getFirstGameEvent(tableId))
            }
        },

        getGameState: ({tableId}, socket) => {
            const player = state.getPlayerBySocket(socket.id)
            const gameState = state.getGameState4(player, tableId)
            socket.emit('action', {type:'refreshGameState', tableId, state:gameState})
        },

        move: ({tableId, move}, socket) => {
            const player = state.getPlayerBySocket(socket.id)
            const expectedMove = state.getExpectedMove(tableId, player, move)
            if(!expectedMove) throw 'The game is still processing events'
            const {player: expectedPlayer, types, eventProcessor} = expectedMove
            if(expectedPlayer != player) throw 'It is not your turn'

            const moveProcessor = expectedMove.allowedActions.filter(f => f.name === move.type)?.[0]
            if(!moveProcessor) throw 'You cannot perform this action'

            let moreEvents = false
            const moveGenerator = state.getEventProcessor(tableId, moveProcessor(player, move))
            do {
                const {value, done} = moveGenerator.next()
                state.setExpectedMove(tableId, null, null, null)
                moreEvents = !done
                state.computePublicStates(tableId)
                state.getPlayers(tableId).forEach(player => {
                const patch = state.getGameStatePatch4(player, tableId)
                    if(patch && patch.length > 0) {
                        io.to(player).emit('action', {type:'gameStatePatched', tableId, patch})
                    }
                })
                if(typeof value === 'function') {
                    // If the generator yields another generator, we should process that game event
                    processGameEvent(tableId, value)
                }
                else if(value !== null && typeof value === 'object') {
                    // If the generator yields an object created by the special 'expect' action creator
                    const {player, allowedActions} = value
                    state.setExpectedMove(tableId, player, allowedActions, eventProcessor)
                    moreEvents = false
                }
            } while(moreEvents)

            // TODO : should now relaunch the expectedMove.eventProcessor
            processGameEvent(tableId, eventProcessor, true)

        },

        resign: ({tableId}, socket) => {
            // todo
        }

    }

}